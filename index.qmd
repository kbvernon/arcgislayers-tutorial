---
format: 
  revealjs:
    theme: [default, custom.scss]
    highlight-style: a11y
    code-line-numbers: false
    slide-number: true
execute: 
  echo: true
knitr:
  opts_chunk: 
    collapse: true
    comment: "#>" 
---

```{r}
#| label: sf-library
#| echo: false
#| include: false
library(sf)
```

## {.kiss data-background-color="#0c0c0c"}

::: {.absolute right=0 top=100 style="width: 65%; text-align: right;"}
[Working with REST APIs to access spatial data]{.georgia style="font-size: 50px; font-weight: 600;"}  
SUDS Workshop
:::

![](figures/ace-frehley.png){.absolute bottom=10 left=0 width=8in}

::: {.absolute right=0 bottom=0 style="width: 60%; text-align: right;"}
2025-10-21  
[{{< iconify bi:github >}} kbvernon/arcgislayers-tutorial](https://github.com/kbvernon/arcgislayers-tutorial)  
[{{< iconify bi:music-note-beamed >}} New York Groove](https://www.youtube.com/watch?v=DXeeY9D9u94&list=RDDXeeY9D9u94&start_radio=1)
:::

# REST API? {.center data-background-color="#0c0c0c"}

## HTTP methods

::: {style="width: 70%; margin: 0 auto 0 0;"}
![](figures/http.svg){width=100%}
:::

## Today's focus

::: {style="width: 70%; margin: 0 auto 0 0;"}
![](figures/http-todays-focus.svg){width=100%}
:::

## URL components

```{r}
#| label: httr2-url-components
library(httr2)

url <- file.path(
  "https://tigerweb.geo.census.gov",
  "arcgis/rest/services/TIGERweb/State_County/MapServer/0"
)

url_parse(url)
```

## Building queries

```{r}
#| label: httr2-request
req <- url |>
  request() |>
  req_url_query(where = "NAME='Utah'", fields = "'NAME'")

url_parse(req[["url"]])
```

## [`arcgislayers`]{.big-font} {.center}

> the core data access package in the R-ArcGIS Bridge, providing [**a unified 
interface for working with ArcGIS data services**]{style="color: #06287e;"}. 
As part of the arcgis metapackage, it enables seamless integration between R and 
the ArcGIS Web GIS ecosystem, including ArcGIS Online, Enterprise, and Location 
Platform.

{{< iconify bi:link-45deg >}} <https://r.esri.com/arcgislayers/>

{{< iconify bi:person >}} [Josiah Parry](https://github.com/JosiahParry), Senior Product Engineer @ Esri


# [Intuition Pumps]{.soft-white .georgia .big-font} {.center data-background-color="#0c0c0c" }

## AGOL query in the browser

![](figures/agol-query-gui.png){width="85%"}

## Return JSON

```json
{
    "displayFieldName": "BASENAME",
    "fieldAliases": {
        "NAME": "NAME"
    },
    "geometryType": "esriGeometryPolygon",
    "spatialReference": {
        "wkid": 102100,
        "latestWkid": 3857
    },
    "fields": [...],
    "features": [
        {
            "attributes": {
                "NAME": "Utah"
            },
            "geometry": {...}
        }
    ]
}
```

## {.center}
[AGOL query animation]{.menu-title style="display: none;"}

::: {style="width: 75%; margin: 0 auto;"}
![](figures/agol-query-gui.gif){width=100%}
:::

## Serialize into simple feature

```r
library(sf)

utah <- read_sf("utah.json")

utah[c("STATE", "NAME")]
#> Simple feature collection with 1 feature and 2 fields
#> Geometry type: POLYGON
#> Dimension:     XY
#> Bounding box:  xmin: -12696310 ymin: 4438780 xmax: -12138450 ymax: 5161234
#> Projected CRS: WGS 84 / Pseudo-Mercator
#>   STATE NAME                       geometry
#> 1    49 Utah POLYGON ((-12412992 5160912...
```

## `arcgislayers` in R

Get US Census TIGER/line data

```{r}
#| label: arcgislayers-full-example
library(arcgislayers)

# connect to a map service
service <- arc_open(url)

# write and execute http request
utah <- arc_select(service, where = "NAME='Utah'")

# querying a <FeatureLayer> returns sf
utah[c("STATE", "NAME")]
```

# [Why care?]{.soft-white .georgia .big-font} {.center data-background-color="#0c0c0c" }

## Focus on remote access...

1. makes data used for research more accessible,
2. shifts effort from data management to data processing,
3. reduces the need for costly data duplication, 
4. supports collaborative research, and 
5. promotes reproducibility.

## Only the `source()` is real!

{{< iconify bi:filetype-json >}} utah.json ~ 1070 KB  

{{< iconify bi:file-text >}} utah.R ~ 0.3 KB  

But sharing the R script is basically sharing the data,  
since getting the data is as simple as `source("utah.R")`*.

::: {.absolute bottom=10 style="color: #829399; font-size: 22px;"}
\* There are always trade-offs...
:::

## But also money!

Modest costs:

> In fiscal year (FY) 2022, the combined budget request for all the major 
statistical agencies and other statistical programs in federal agencies 
(including the decennial census, economic, and agricultural censuses) totaled 
$7.1 billion. This amounted to about 0.03 percent of GDP.

For significant ROI:

> A recent publication from the Department of Commerce estimates the value of 
government data-intensive sector as $407.9 billion in 2012 rapidly growing to 
$778.0 billion in 2022. 

Source: NASEM. 2025. Principles and Practices for a Federal Statistical Agency: 
Eighth Edition. <https://doi.org/10.17226/27934>.

# [Arguments to `arc_select()`]{.soft-white .georgia} {data-background-color="#0c0c0c" }
When we pass query parameters, `arc_select()` helps us build a url query string 
and then sends that request to the service endpoint.

## `fields` for column selection

```r
# available fields at this service endpoint
list_fields(service)[["name"]]
#>  [1] "MTFCC"      "OID"        "GEOID"      "STATE"      "STATENS"   
#>  [6] "BASENAME"   "NAME"       "LSADC"      "FUNCSTAT"   "AREALAND"  
#> [11] "AREAWATER"  "REGION"     "DIVISION"   "STUSAB"     "STGEOMETRY"
#> [16] "CENTLAT"    "CENTLON"    "INTPTLAT"   "INTPTLON"   "OBJECTID"

states <- arc_select(service, fields = "NAME")
names(states)
#> [1] "NAME"     "geometry"
```

## `where` for SQL queries

```r
intermountain <- arc_select(service, where = "NAME IN ('Utah', 'Nevada')")

intermountain[["NAME"]]
#> [1] "Nevada" "Utah"
```

## `crs` for return spatial reference

```r
library(sf)

states <- arc_select(service, crs = 26912)

st_crs(states)$epsg
#> [1] 26912
```

## `geometry` for returning geometry

```r
state_attributes <- arc_select(service, geometry = FALSE)

# are all geometries empty?
all(st_is_empty(state_attributes))
#> [1] TRUE
```

## `filter_geom` for spatial filters

```{r}
#| label: arc-select-filter_geom
# watershed boundaries database service
wbd_url <- file.path(
  "https://hydrowfs.nationalmap.gov",
  "arcgis/rest/services/wbd/MapServer/3"
)

wbd <- arc_open(wbd_url)

# basins (huc6) of utah
basins <- arc_select(wbd, filter_geom = st_geometry(utah))

basins[["name"]]
```

## `predicate` for spatial relation

```r
# intersects is the default
basins <- arc_select(
  wbd,
  filter_geom = st_geometry(utah),
  predicate = "within"
)

basins[["name"]]
#> [1] "Jordan"
```

# [What about `rasters`?]{.soft-white .georgia .big-font} {.center data-background-color="#0c0c0c" }
The answer is `yes`.

## `arc_raster()`

```{r}
#| label: arc-raster
url <- file.path(
  "https://elevation.nationalmap.gov",
  "arcgis/rest/services/3DEPElevation/ImageServer"
)

gs3dep <- arc_open(url)

gsl <- basins |>
  subset(name == "Great Salt Lake") |>
  st_transform(st_crs(gs3dep))

bb8 <- st_bbox(gsl)

dx <- diff(bb8[c("xmin", "xmax")])
dy <- diff(bb8[c("ymin", "ymax")])

dem <- arc_raster(
  gs3dep,
  xmin = bb8[["xmin"]],
  xmax = bb8[["xmax"]],
  ymin = bb8[["ymin"]],
  ymax = bb8[["ymax"]],
  width = 1000,
  height = round(1000 * (dy / dx) / 100) * 100
)
```

## Result

```{r}
#| label: terra-plot-eval
#| include: false
library(magick)

prepare_image <- function(x, dx = 0, dy = 0, color = "white") {
  img <- image_read(path = x)

  img <- image_trim(img)

  info <- image_info(img)

  new_width <- info[["width"]] + dx
  new_height <- info[["height"]] + dy

  img <- image_extent(
    img,
    geometry_area(new_width, new_height),
    color = color
  )

  image_write(img, path = x)
}

library(terra)

png("figures/dem.png", width = 5, height = 7.5, units = "in", res = 300)
par(mar = c(0, 0, 0, 0), oma = c(0, 0, 0, 0))
plot(dem)
plot(
  st_geometry(gsl),
  add = TRUE,
  color = "transparent",
  border = "white",
  lwd = 3
)
dev.off()

prepare_image("figures/dem.png")
```

:::::: {.columns}
::: {.column width="40%"}

```{r}
#| label: terra-plot
#| eval: false
library(terra)

plot(dem)
plot(
  st_geometry(gsl),
  add = TRUE,
  color = "transparent",
  border = "white",
  lwd = 3
)
```

:::
::: {.column width="50%"}
::: {.dumb-p-tag style="width: 80%; margin: 0 auto;"}

<img src="figures/dem.png">

:::
:::
::::::

# [Conclusion]{.soft-white .georgia .big-font} {.center data-background-color="#0c0c0c" }

## `arcgislayers` is excellent for querying AGOL {.center}

## `arcgislayers` also offers write access {.center}

Can publish to AGOL, so you can share scripts and your own data.

## Federal spatial datasets are everywhere {.center}

USGS, EPA, NOAA, USDA, USFS, BLM, NPS, Census, etc.

## With additional endpoints through other APIs {.center}

Once you understand the process, it is straightforward to access it with `httr2`.